package cachesim;

import java.util.Random;

public class CacheSimluator {
	
	private static int[][] cache = new int[64][4];
	private static int[] memAddresses = new int[1000];
	private static int hitCount = 0;
	private static double hitRate = -1.0;
	private static double avgMemAccessLatency = -1.0;
	private static int totalRuntime = 0; //CPU cycles
	private static int totalMemCalls = 0;
	private static final int MAX_SIMULATION_TIME = 10; //TODO change to 10000
	
	
	public static void main(String[] args) {
		performSimulation();
		//calculateOutputs();
		printOutputs();
	}
	
	
	private static void performSimulation() {
		// TODO Auto-generated method stub
		while(totalRuntime < MAX_SIMULATION_TIME){
			
			//generate a random hex memory value
			Random rand = new Random();
			int myRandomNumber = rand.nextInt(0x10000000); // Generates a random number between 0x10 and 0x20
			String result = Integer.toHexString(myRandomNumber); // Random hex number in result
			System.out.println("Retrieving new memory address... " + result); // Prints it in hex, such as "0x14"

			totalRuntime++;
		}
		
		
	}
	
	private static void calculateOutputs() {
		hitRate = hitCount / totalMemCalls;
		avgMemAccessLatency = totalMemCalls / totalRuntime;
	}


	public static void printOutputs(){
		System.out.println("Hit Rate: " + hitRate);
		System.out.println("Average Memory Access Latency: " + avgMemAccessLatency);
		System.out.println("Total Runtime: " + totalRuntime);
	}

}
