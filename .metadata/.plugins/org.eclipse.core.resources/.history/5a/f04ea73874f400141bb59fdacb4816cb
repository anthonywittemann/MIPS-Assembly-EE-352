package cachesim;

import java.util.Random;

public class CacheSimluator {
	
	private static int[][] cache = new int[64][4];
	private static int hitCount = 0;
	private static double hitRate = -1.0;
	private static double avgMemAccessLatency = -1.0;
	private static int totalRuntime = 0; //CPU cycles
	private static int totalMemCalls = 0;
	private static final int MAX_SIMULATION_TIME = 10000000;
	private static final int MISS_PENALTY = 100;
	
	
	public static void main(String[] args) {
		performSimulation();
		calculateOutputs();
		printOutputs();
	}
	
	
	private static void performSimulation() {

		while(totalRuntime < MAX_SIMULATION_TIME){
			
			//generate a random memory value
			Random rand = new Random();
			//int randomAddress = Math.abs(rand.nextInt()); // Generates a random address between 0 and 2^32
			
			int randomAddress = (int) Math.abs((2^8) * Math.random());
			
			System.out.println("Retrieving new memory address... " + randomAddress); // Prints it in hex, such as "0x14"

			
			//map address to a set in cache
			int setInCache = randomAddress % 64;
			
			
			//check if the set is in cache
			boolean isInCache = false;
			for(int col = 0; col < cache[setInCache].length; col++){
				if(cache[setInCache][col] == randomAddress){
					isInCache = true;
				}
			}
			
			
			//add to cache and apply LRU if not currently there
			if(!isInCache){
				totalRuntime += MISS_PENALTY;//apply miss penalty
				
				//To apply LRU, the least recently used is always the 0th column 
				//every column thereafter will be moved over to the right -->
				int temp0 = cache[setInCache][0];
				int temp1 = cache[setInCache][1];
				int temp2 = cache[setInCache][2];
				cache[setInCache][0] = randomAddress;
				cache[setInCache][1] = temp0;
				cache[setInCache][2] = temp1;
				cache[setInCache][3] = temp2;
			}
			
			totalMemCalls++;
			totalRuntime++;
		}
		
		
	}
	
	private static void calculateOutputs() {
		hitRate = ((double) hitCount) / ((double) totalMemCalls);
		avgMemAccessLatency = ((double) totalMemCalls) / ((double) totalRuntime);
	}


	public static void printOutputs(){
		System.out.println("\nMem Calls: " + totalMemCalls);
		
		System.out.println("Hit Rate: " + hitRate);
		System.out.println("Average Memory Access Latency: " + avgMemAccessLatency);
		System.out.println("Total Runtime: " + totalRuntime);
	}

}
